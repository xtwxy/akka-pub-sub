akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  log-config-on-start = off
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    log-remote-lifecycle-events = off
    artery.untrusted-mode = off
    log-sent-messages = off

    netty.tcp {
      hostname = "192.168.0.78"
      port = 2553
      hostname = ${?HOSTNAME}
      port = ${?PORT}
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://dcim@192.168.0.78:2553"
    ]

    # Settings for the DistributedPubSub extension
    pub-sub {
      # Actor name of the mediator actor, /system/distributedPubSubMediator
      name = distributedPubSubMediator

      # Start the mediator on members tagged with this role.
      # All members are used if undefined or empty.
      # role = ""

      # The routing logic to use for 'Send'
      # Possible values: random, round-robin, broadcast
      routing-logic = random

      # How often the DistributedPubSubMediator should send out gossip information
      # gossip-interval = 1s

      # Removed entries are pruned after this duration
      removed-time-to-live = 120s

      # Maximum number of elements to transfer in one message when synchronizing the registries.
      # Next chunk will be transferred in next round of gossip.
      # max-delta-elements = 3000

      # When a message is published to a topic with no subscribers send it to the dead letters.
      send-to-dead-letters-when-no-subscribers = on

      # The id of the dispatcher to use for DistributedPubSubMediator actors.
      # If not specified default dispatcher is used.
      # If specified you need to define the settings of the actual dispatcher.
      # use-dispatcher = ""
    }
  }

  persistence {
    journal {
      plugin = "akka.persistence.journal.leveldb"
      leveldb {
        dir = "target/journal"
      }
    }
    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      local {
        dir = "target/snapshots"
      }
    }
  }

  extensions = ["akka.cluster.pubsub.DistributedPubSub"]
}

